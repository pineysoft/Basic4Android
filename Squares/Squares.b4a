Version=3.8
IconFile=
NumberOfModules=7
Module1=GameActivity
Module2=Point
Module3=Player
Module4=Constants
Module5=GameSquare
Module6=Turn
Module7=NetConn
Build1=Default,pineysoft.squarepaddocks
Build2=Debug,pineysoft.squarepaddocks,WithDebug
DoNotOverwriteManifest=False
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="4" android:targetSdkVersion="14"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~
NumberOfFiles=26
File1=Bluetooth.png
File2=bounce.wav
File3=checkboxOff.png
File4=checkboxOn.png
File5=gametitle.png
File6=GameTypeScreen.bal
File7=Giggle1.mp3
File8=grass.png
File9=layout1.bal
File10=monsterImage1.png
File11=monsterImage10.png
File12=monsterImage11.png
File13=monsterImage12.png
File14=monsterImage2.png
File15=monsterImage3.png
File16=monsterImage4.png
File17=monsterImage5.png
File18=monsterImage6.png
File19=monsterImage7.png
File20=monsterImage8.png
File21=monsterImage9.png
File22=phone.png
File23=playgamebutton.png
File24=StartScreen.bal
File25=wifi.png
File26=winnerScreen.bal
NumberOfLibraries=12
Library1=animationplus
Library2=audio
Library3=core
Library4=phone
Library5=reflection
Library6=serial
Library7=randomaccessfile
Library8=stringfunctions
Library9=network
Library10=ime
Library11=dateutils
Library12=sql
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Square Paddocks
	#VersionCode: 11
	#VersionName: 1.1
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: False
#End Region

Sub Process_Globals
	Private CC As ContentChooser
	Private admin As BluetoothAdmin
	Private btDevices As List
	Type NameAndMac (name As String, mac As String)
	Private searchInProgress As Boolean
	Private ip As String
	Public IsMaster As Boolean
	Public gameStart As Boolean
	Public SpConstants As Constants
End Sub

Sub Globals
	Dim btnConnectWifi As Button
	Dim lblIP As Label
	Dim ProgressBar1 As ProgressBar
	Dim spnrPairedDevices As Spinner
	Dim edtIP As EditText
	Dim btnConnectBT As Button
	Dim lblWifiStatus As Label
	Dim lblBTStatus As Label
	Dim IME As IME
	Dim lblProgress As Label
	Dim lblFile As Label
	Dim btnMakeDiscoverable As Button
	Dim btnBTSearch As Button
	Private txtMessage As EditText
	Private btnStartGame As Button
End Sub

Sub Activity_Create(FirstTime As Boolean)
	If FirstTime Then
		StartService(NetConn)
		SpConstants.Initialize
		btDevices.Initialize
		admin.Initialize("Admin")
		CC.Initialize("CC")
		
		'add the already paired devices to the list
		'later the user can search for new devices
		Dim serial1 As Serial
		serial1.Initialize("")
		Dim pairedDevices As Map = serial1.GetPairedDevices
		For i = 0 To pairedDevices.Size - 1
			Dim nm As NameAndMac
			nm.Initialize
			nm.mac = pairedDevices.GetValueAt(i)
			nm.name = pairedDevices.GetKeyAt(i)
			btDevices.Add(nm)
		Next
	End If
	IME.Initialize("")
	Activity.LoadLayout("GameTypeScreen")
	Activity.AddMenuItem("Disconnect", "mnuDisconnect")
	'filter for ip address (allow multiple dots)
	IME.SetCustomFilter(edtIP, edtIP.INPUT_TYPE_DECIMAL_NUMBERS, "0123456789.")
End Sub

Sub Activity_Resume
	edtIP.Text = ip
	spnrPairedDevices.Clear
	For Each nm As NameAndMac In btDevices
		spnrPairedDevices.Add(nm.name)
	Next
	'try to turn on Bluetooth if it is disabled
	If admin.IsEnabled = False Then
		If admin.Enable = False Then 
			ToastMessageShow("Error enabling Bluetooth adapter.", True)
		Else
			ToastMessageShow("Enabling Bluetooth adapter...", False)
			'the StateChanged event will be soon raised
		End If
	End If
	UpdateUI
	UpdateProgress
End Sub

Sub mnuDisconnect_Click
	CallSub(NetConn, "Disconnect")
End Sub



Sub Activity_Pause (UserClosed As Boolean)
	'save the ip address
	ip = edtIP.Text
End Sub

Sub Admin_StateChanged (NewState As Int, OldState As Int)
	UpdateUI
End Sub

Public Sub UpdateUI
	'this sub is responsible for updating the UI based on the state which is stored in the service
	Dim wifi = True, bt = True, startGame = True, discover = True As Boolean
	If admin.IsEnabled = False Then
		bt = False
		discover = False
	End If
	lblIP.Text = NetConn.MyIP
	lblWifiStatus.Text = NetConn.WifiStatus
	lblBTStatus.Text = NetConn.BTStatus
	If NetConn.WifiConnected Then lblWifiStatus.TextColor = Colors.Green Else lblWifiStatus.TextColor = Colors.Red
	If NetConn.BTConnected Then lblBTStatus.TextColor = Colors.Green Else lblBTStatus.TextColor = Colors.Red
	If spnrPairedDevices.Size = 0 Then bt = False
	If NetConn.BTConnected OR NetConn.WifiConnected Then
		wifi = False
		bt = False
		discover = False
	Else 'no connection
		gameStart = False
	End If
	
	If wifi AND Regex.IsMatch("[^.]+\.[^.]+\.[^.]+\.[^.]+", edtIP.Text) = False Then 
		wifi = False
	End If
	If NetConn.MyIP.Length = 0 OR NetConn.MyIP = "127.0.0.1" Then
		wifi = False
	End If
	If NetConn.SendingFile OR NetConn.ReceivingFile Then gameStart = False
	If searchInProgress Then bt = False
	btnConnectBT.Enabled = bt
	btnConnectWifi.Enabled = wifi
	btnBTSearch.Enabled = discover
	btnMakeDiscoverable.Enabled = discover
End Sub


Public Sub UpdateProgress
	lblProgress.Text = NetConn.progressText
	ProgressBar1.Progress = NetConn.progressValue
	lblFile.Text = NetConn.lblFile
End Sub

Sub btnConnectWifi_Click
	CallSubDelayed2(NetConn, "ConnectWifi", edtIP.Text)
End Sub

Sub btnConnectBT_Click
	If spnrPairedDevices.SelectedIndex = -1 Then Return
	Dim nm As NameAndMac = btDevices.Get(spnrPairedDevices.SelectedIndex)
	CallSubDelayed2(NetConn, "ConnectBT", nm.mac)
End Sub

'starts a search process
Sub btnBTSearch_Click
	spnrPairedDevices.Clear
	btDevices.Clear
	If admin.StartDiscovery	= False Then 
		ToastMessageShow("Error starting discovery process.", True)
	Else
		searchInProgress = True
		SetBTStatus("Searching for BT devices...")
		UpdateUI
	End If
End Sub

Sub SetBTStatus(status As String)
	NetConn.BTstatus = status
	lblBTStatus.Text = status
End Sub

Sub Admin_DiscoveryFinished
	searchInProgress = False
	If spnrPairedDevices.Size = 0 Then
		SetBTStatus("No BT devices found.")
	Else
		SetBTStatus(spnrPairedDevices.Size & " device(s) found.")
	End If
	UpdateUI
End Sub

Sub Admin_DeviceFound (Name As String, MacAddress As String)
	Log(Name & ":" & MacAddress)
	spnrPairedDevices.Add(Name)
	Dim nm As NameAndMac
	nm.Initialize
	nm.Name = Name
	nm.mac = MacAddress
	btDevices.Add(nm)
	SetBTStatus("Searching for devices (" & btDevices.Size & " found)")
End Sub

Sub btnMakeDiscoverable_Click
	'this intent makes the device discoverable for 300 seconds.
	Dim i As Intent
	i.Initialize("android.bluetooth.adapter.action.REQUEST_DISCOVERABLE", "")
	i.PutExtra("android.bluetooth.adapter.extra.DISCOVERABLE_DURATION", 300)
	StartActivity(i)
End Sub

Sub edtIP_TextChanged (Old As String, New As String)
	UpdateUI 'the btnConnectWifi.Enabled depends on the text
End Sub

Sub btnChooseFile_Click
	CC.Show("*/*", "Choose file to send")
End Sub

Sub CC_Result (Success As Boolean, Dir As String, FileName As String)
	If Success Then
		Dim normalizedFile As String = GetPathFromContentResult(FileName)
		If File.Exists("", normalizedFile) == False Then
			ToastMessageShow("File is not accessible.", True)
			Return
		End If
		CallSubDelayed3(NetConn, "SendFile", "", normalizedFile)
	Else
		If LastException.IsInitialized Then ToastMessageShow(LastException.Message, True)
	End If
End Sub

'this code tries to retrieve the real file from the uri
Sub GetPathFromContentResult(UriString As String) As String
    If UriString.StartsWith("/") Then Return UriString 'If the user used a file manager to choose the image
    Dim Proj() As String
    Proj = Array As String("_data")
    Dim Cursor As Cursor
    Dim r As Reflector
    Dim Uri As Object
    Uri = r.RunStaticMethod("android.net.Uri", "parse", _
        Array As Object(UriString), _
        Array As String("java.lang.String"))
    r.Target = r.GetContext
    r.Target = r.RunMethod("getContentResolver")
    Cursor = r.RunMethod4("query", _
    Array As Object(Uri, Proj, Null, Null, Null), _
    Array As String("android.net.Uri", _
        "[Ljava.lang.String;", "java.lang.String", _
        "[Ljava.lang.String;", "java.lang.String"))
    
    Cursor.Position = 0
    Dim res As String
    res = Cursor.GetString("_data")
    Cursor.Close
    Return res
End Sub

Sub txtMessage_EnterPressed
	CallSubDelayed2("NetConn","SendMessage","C," & txtMessage.Text)
End Sub
Sub btnStartGame_Click
	If NetConn.BTConnected Then
		GameActivity.GameMode = SpConstants.GAMETYPE_MODE_BT
	Else If NetConn.WifiConnected Then
		GameActivity.GameMode = SpConstants.GAMETYPE_MODE_WIFI
	End If
	
	If GameActivity.GameMode <> SpConstants.GAMETYPE_MODE_LOC Then
		CallSubDelayed2("NetConn","SendMessage","M," & GameActivity.GameMode)
	End If
	
	GameActivity.IsMaster = True
	StartActivity(GameActivity)
	
End Sub