Version=3.2
IconFile=
NumberOfModules=0
Package=flm.b4a.lgdxtest
DoNotOverwriteManifest=False
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="7" android:targetSdkVersion="14"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~
UserTypesHint=
NumberOfFiles=0
NumberOfLibraries=2
Library1=core
Library2=libgdx
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: lGDX Dominos
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: landscape
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: true
	#IncludeTitle: false
#End Region

Sub Process_Globals
End Sub

Sub Globals
	Dim lGdx As LibGDX
	Dim GL As lgGL
	Dim Camera As lgOrthographicCamera
	Dim World As lgBox2DWorld
	Dim Renderer As lgBox2DDebugRenderer
End Sub

Sub Activity_Create(FirstTime As Boolean)
	'Disables the accelerometer and the compass
	Dim Config As lgConfiguration
	Config.useAccelerometer = False
	Config.useCompass = False

	'Creates the libGDX surface
	lGdx.Initialize2(Config, "LG")
End Sub

Sub Activity_Resume
	'Informs libGDX of Resume events
	If lGdx.IsInitialized Then lGdx.Resume
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	'Informs libGDX of Pause events
	If lGdx.IsInitialized Then lGdx.Pause
End Sub

Sub LG_Create
	'Debug renderer
	Renderer.Initialize2(True, False, False, True, False, False)

	'World
	Dim vGravity As lgMathVector2
	World.Initialize(vGravity.set(0, -10), True, "")
	World.SetContinuousPhysics(True)
	World.SetWarmStarting(True)

	'Floor
	Dim fd As lgBox2DFixtureDef
	Dim sd As lgBox2DPolygonShape
	sd.setAsBox(50, 10)
	fd.shape = sd
	Dim bd As lgBox2DBodyDef
	bd.position.set(0, -10)
	World.createBody(bd).createFixture(fd)
	sd.dispose

	'Platforms
	For i = 0 To 3
		Dim fd As lgBox2DFixtureDef
		Dim sd As lgBox2DPolygonShape
		sd.setAsBox(15, 0.125)
		fd.shape = sd
		Dim bd As lgBox2DBodyDef
		bd.position.set(0, 5 + 5 * i)
		World.createBody(bd).createFixture(fd)
		sd.dispose
	Next

   'Dominos
	Dim fd As lgBox2DFixtureDef
	Dim sd As lgBox2DPolygonShape
	sd.setAsBox(0.125, 2)
	fd.shape = sd
	fd.Density = 25
	Dim bd As lgBox2DBodyDef
	bd.Type = World.BODYTYPE_Dynamic
	Dim friction As Float = 0.5
	Dim numPerRow As Int = 25
	For i = 0 To 3
		For j = 0 To numPerRow - 1
			fd.friction = friction
			bd.position.set(-14.75 + j * (29.5 / (numPerRow - 1)), 7.3 + 5 * i)
			If (i = 2 AND j = 0) Then
				bd.angle = -0.1
				bd.position.x = bd.position.x + 0.1
			Else If (i = 3 AND j = numPerRow - 1) Then
				bd.angle = 0.1
				bd.position.x = bd.position.x - 0.1
			Else
				bd.angle = 0
			End If
			Dim myBody As lgBox2DBody = World.createBody(bd)
			myBody.createFixture(fd)
		Next
	Next
	sd.dispose
End Sub

Sub LG_Resize(Width As Int, Height As Int)
	'Sets the camera viewport and position
	Camera.Initialize2(Width / 16, Height / 16)
	Camera.Position.set(0, Height / 40, 0)
End Sub

Sub LG_Render
	'Clears the screen
	GL.glClear(GL.GL10_COLOR_BUFFER_BIT)

	'Updates the matrices of the camera
	Camera.Update

	'Updates and draws the simulation
	LG_Update
	Renderer.render(World.InternalObject, Camera.Combined)
End Sub

Sub LG_Update
	World.Step(1/60, 8, 3)
End Sub

Sub LG_Resume
End Sub

Sub LG_Pause
End Sub

Sub LG_Dispose
	'Disposes all resources
	Renderer.dispose
	World.dispose
End Sub
